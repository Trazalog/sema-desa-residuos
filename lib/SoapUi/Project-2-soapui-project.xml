<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="63ef023d-8c1f-44c2-98cf-a1a6176086c8" activeEnvironment="Default" name="Project 2" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="63f97c2c-9500-414e-88af-e9ccc396671f" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://CI:8089/</con:endpoint><con:endpoint>http://localhost</con:endpoint></con:endpoints><con:resource name="" path="/" id="b5a625d1-85e1-423e-bfab-fbf36e5ccdb1"><con:settings/><con:parameters/><con:method name="1" id="1b80f299-dee6-4f59-a43a-763de7cc2b16" method="GET"><con:settings/><con:parameters/></con:method></con:resource></con:interface><con:restMockService id="efc44172-fd5f-4f66-93c2-4d5bfa4935b4" port="3000" path="/" host="CI" name="http://localhost" docroot=""><con:settings/><con:properties/><con:restMockAction name="/empresas" method="GET" resourcePath="/empresas" id="80c50217-c593-4096-8fed-63490e8e2005"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="empresas" id="1540229e-b066-4b06-8832-e7de642d17ef" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "empresas": {
        "empresa": [        
                 {
                        "nom": {
                            "nom_emp":"emp 1"
                        },
                        "choferes" :{ 
                            "chofer" : [
                                    {
                                        "nom_chofer": "fernando flecha bus"
                                    },
                                    {
                                        "nom_chofer": "juan flecha bus"
                                    }
                            ]
                        },
                        "movilidades":{
                                "movilidad" : [
                                    {
                                        "nom_movil" : "fiat 600",
                                        "registro" : "1",
                                        "dominio" : "00"
                                    },
                                    {
                                        "nom_movil" : "fiat uno",
                                        "registro" : "2",
                                        "dominio" : "22"
                                    }
                            ]
                        }
                },
                {
                    "nom": {
                        "nom_emp":"emp 2"
                    },
                    "choferes" :{ 
                        "chofer" : [
                                {
                                    "nom_chofer": "fernando flecha 2"
                                },
                                {
                                    "nom_chofer": "juan flecha 2"
                                }
                        ]
                    },
                    "movilidades":{
                            "movilidad" : [
                                {
                                    "nom_movil" : "peugeot 206",
                                    "registro" : "3",
                                    "dominio" : "33"
                                },
                                {
                                    "nom_movil" : "peugeot 408",
                                    "registro" : "4",
                                    "dominio" : "44"
                                }
                        ]
                    }
                 }
        ]
    }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/zonas" method="GET" resourcePath="/zonas" id="cf9e57da-bb84-41c7-b5ad-95fd3b03dd48"><con:settings/><con:defaultResponse>zonas</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="zonas" id="0f9135f4-1ddb-4ce4-a31f-c976e9c20c09" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "zonas" : {
            "zona" : [
                {
                    "nombre": "zona 1"
                },
                {
                    "nombre": "zona 2"
                },
                {
                    "nombre": "zona 3"
                },
                {
                    "nombre": "zona 4"
                },
                {
                    "nombre": "zona 5"
                }
            ]
    }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/circuitos" method="GET" resourcePath="/circuitos" id="2818399a-8093-4bb2-9999-122504ccd92f"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="circuitos" id="99d8fcbf-b623-4aff-ba5b-2772ae68bf2c" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "circuitos" : {
                "circuito" : [
                    {
                        "nombre": "circuito 1"
                    },
                    {
                        "nombre": "circuito 2"
                    },
                    {
                        "nombre": "circuito 3"
                    },
                    {
                        "nombre": "circuito 4"
                    },
                    {
                        "nombre": "circuito 5"
                    }
                ]
    }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/tiporesiduos" method="GET" resourcePath="/tiporesiduos" id="ea79aef8-29b4-42bd-8c3d-38472181dd5a"><con:settings/><con:defaultResponse>tiporesiduos</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="tiporesiduos" id="fae46175-97a0-466a-929c-efab4d95cfc5" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "tipoResiduos" : {
            "tipoResiduo" : [
                {
                    "nombre": "residuo solido urbano"
                },
                {
                    "nombre": "residuo industrial"
                },
                {
                    "nombre": "residuo agragrio"
                },
                {
                    "nombre": "residuo medico y de laboratorio"
                },
                {
                    "nombre": "residuo radioactivo"
                }
            ]
    }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/disposisionesfinales" method="GET" resourcePath="/disposisionesfinales" id="66d8083e-1588-4575-a4d6-3b0f7b0d8b6e"><con:settings/><con:defaultResponse>disposisionesfinales</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="disposisionesfinales" id="9a1395f5-75d6-4c60-86ae-4aee83119843" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "disposicionesFinales" : {
                    "disposicionFinal" : [
                        {
                            "nombre": "PTA"
                        },
                        {
                            "nombre": "Recup. D. Mariano"
                        }
                    ]
    }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/tabladatos" method="POST" resourcePath="/tabladatos" id="3764f232-5123-40f0-9eb7-531b24a06fbf"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="/tabladatos" id="e98297e5-aa9d-4631-b8d0-388a64758fd5" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "filas" : {
                "fila" : [
                    {
                        "zona": "zona 1",
                        "circuito": "circuito 1",
                        "transportista": "tansportista 1",
                        "movilidad": "movilidad 1",
                        "chofer": "chofer 1",
                    }
                ]
    }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/tablaresiduos" method="POST" resourcePath="/tablaresiduos" id="91224bee-8ca8-4da5-ae6c-67702d157016"><con:settings/><con:defaultResponse>/tablaresiduos</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="/tablaresiduos" id="ac600a99-d6a7-475f-9976-2a6301b8faaa" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/tablares" method="POST" resourcePath="/tablares" id="819153f4-49b4-42e9-a77a-48cb834060d1"><con:settings/><con:defaultResponse>/tablares</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="/tablares" id="cb4e947d-5e63-4a17-b542-21c49327b2b1" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>